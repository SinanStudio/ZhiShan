<?php

namespace Deployer;

require 'recipe/laravel.php';

$custom = [
    'application' => 'project name',// 项目名称
    'repository'  => 'your git repository url',// 部署项目仓库地址
    'host'        => 'Ip or domain',
    'deploy_path' => 'your deploy path',// 部署项目路径
    'branch'      => 'master',// 选择部署的分支
];

// Project name
set('application', $custom['application']);

set('default_stage', 'production');

// Project repository
// 指定你的代码所在的服务器 SSH 地址，请不要使用 https 方式哦。
set('repository', $custom['repository']);

// [Optional] Allocate tty for git clone. Default value is false.
set('git_tty', true);

// Shared files/dirs between deploys
// 分享文件即目录，通常也不用改，默认包含了 storage 目录
add('shared_files', []);
add('shared_dirs', []);

// Writable dirs by web server
// 可写目录，一般不用改
add('writable_dirs', []);

// 保存最近五次部署，这样的话回滚最多也只能回滚到前 5 个版本
set('keep_releases', 5);

// 实践证明，这样能减少一些不必要的麻烦，如出现权限相关的问题，也可将此项设置为 true 后尝试
set('writable_use_sudo', false);

// set('writable_mode', 'chown');

set('cleanup_use_sudo', true);

// Hosts
host($custom['host'])// 这里填写目标服务器的 IP 或者域名
->stage('production')
    ->user('deployer')// 这里填写 deployer
    ->port(22)
    ->set('branch', $custom['branch'])// 最新的 master 分支部署到生产机
    ->identityFile('~/.ssh/deployerkey')// 并指定公钥的位置
    ->set('deploy_path', $custom['deploy_path']); // 指定项目部署到服务器上的哪个目录
//    ->forwardAgent(true)
//    ->multiplexing(true)
//    ->set('http_user', 'www-data') // 这个与 nginx 里的配置一致
//    ->addSshOption('UserKnownHostsFile', '/dev/null')
//    ->addSshOption('StrictHostKeyChecking', 'no');

// Tasks
// 这算是个自定义任务示例
//task('build', function () {
//    run('cd {{release_path}} && build');
//});

// 自定义任务：重置 opcache 缓存
//task('opcache_reset', function () {
//    run('{{bin/php}} -r \'opcache_reset();\'');
//});

// 自定义任务：重启 php-fpm 服务
task('php-fpm:restart', function () {
    run('sudo service php7.3-fpm restart');
});

// 自定义任务：supervisor reload
//task('supervisor:reload', function () {
//    run('sudo supervisorctl reload');
//});

// 自定义任务：部署成功了用 bearychat 发消息给大佬和自己
//task('send_message', function () {
//    run('{{bin/php}} {{release_path}}/artisan deployed');
//});

// 执行自定义任务，注意时间点是 current 已经成功链向新部署的目录之后
after('deploy:symlink', 'php-fpm:restart');
//after('deploy:symlink', 'supervisor:reload');

// 部署成功后重置 opcache 缓存
//after('deploy:symlink', 'opcache_reset');

// 部署成功后调用 laravel 命令行发送通知
//after('success', 'send_message');

// [Optional] if deploy fails automatically unlock.
// 如果部署失败，自动解除部署锁定状态，以免影响下次执行
after('deploy:failed', 'deploy:unlock');

// Migrate database before symlink new release.
// 执行数据库迁移，建议删掉，迁移虽好，但毕竟高风险，只推荐用于开发环境。
// before('deploy:symlink', 'artisan:migrate');

// 部署流程
task('deploy', [
    'deploy:info',
    'deploy:prepare',
    'deploy:lock',
    'deploy:release',
    'deploy:update_code',
    'deploy:shared',
    'deploy:vendors',
    'deploy:writable',
    'artisan:storage:link',   // execute artisan storage:link
    'artisan:view:clear',
    'artisan:cache:clear',
    'artisan:config:cache',
    'artisan:optimize',
    'deploy:symlink',
    'deploy:unlock',
    'cleanup',
    'success',
]);